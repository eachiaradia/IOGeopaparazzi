# -*- coding: utf-8 -*-

"""
/***************************************************************************
 IOGeopaparazzi
								 A QGIS plugin
 A plugin to import/export geodata from/to geopaparazzi
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
							  -------------------
		begin				: 2018-07-19
		copyright			: (C) 2018 by Enrico A. Chiaradia
		email				: enrico.chiaradia@yahoo.it
 ***************************************************************************/

/***************************************************************************
 *																		 *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or	 *
 *   (at your option) any later version.								   *
 *																		 *
 ***************************************************************************/
"""

__author__ = 'Enrico A. Chiaradia'
__date__ = '2018-07-19'
__copyright__ = '(C) 2018 by Enrico A. Chiaradia'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import sys
import inspect

from qgis.core import QgsProcessingAlgorithm, QgsApplication
from .io_geopaparazzi_provider import IOGeopaparazziProvider
from PyQt5.QtCore import QSettings, QTranslator, QCoreApplication, qVersion

cmd_folder = os.path.split(inspect.getfile(inspect.currentframe()))[0]

if cmd_folder not in sys.path:
	sys.path.insert(0, cmd_folder)


class IOGeopaparazziPlugin(object):

	def __init__(self):
		# initialize plugin directory
		self.plugin_dir = os.path.dirname(__file__)
		# initialize locale
		locale = QSettings().value("locale/userLocale")[0:2]
		localePath = os.path.join(self.plugin_dir, 'i18n', 'iogeopaparazzi_{}.qm'.format(locale))

		if os.path.exists(localePath):
			self.translator = QTranslator(QCoreApplication.instance())
			self.translator.load(localePath)

			if qVersion() > '4.3.3':
				QCoreApplication.installTranslator(self.translator)
		
		self.provider = IOGeopaparazziProvider()

	def initGui(self):
		QgsApplication.processingRegistry().addProvider(self.provider)

	def unload(self):
		QgsApplication.processingRegistry().removeProvider(self.provider)
